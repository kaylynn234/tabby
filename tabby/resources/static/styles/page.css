@import url("https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&display=swap");
@import url("https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css");

:root {
  /* These are unpacked RGB tuples. Because of the way CSS variables work, we can pass these to `rgb`, and additionally
  we can use `rgba` if variable transparency is necessary. */

  --shade-100: 250, 250, 250;
  --shade-200: 245, 245, 245;
  --shade-300: 240, 240, 240;
  --shade-400: 222, 222, 222;
  --shade-500: 194, 194, 194;
  --shade-600: 151, 151, 151;
  --shade-700: 129, 129, 129;
  --shade-800: 96, 96, 96;
  --shade-900: 60, 60, 60;

  --blue-50: 227, 242, 253;
  --blue-100: 187, 222, 251;
  --blue-200: 144, 202, 249;
  --blue-300: 100, 181, 246;
  --blue-400: 66, 165, 245;
  --blue-500: 33, 150, 243;
  --blue-600: 30, 136, 229;
  --blue-700: 25, 118, 210;
  --blue-800: 21, 101, 192;
  --blue-900: 13, 71, 161;

  --blue-accent-100: 130, 177, 255;
  --blue-accent-200: 68, 138, 255;
  --blue-accent-400: 41, 121, 255;
  --blue-accent-700: 41, 98, 255;

  --red-50: 255, 235, 238;
  --red-100: 255, 205, 210;
  --red-200: 239, 154, 154;
  --red-300: 229, 115, 115;
  --red-400: 239, 83, 80;
  --red-500: 244, 67, 54;
  --red-600: 229, 57, 53;
  --red-700: 211, 47, 47;
  --red-800: 198, 40, 40;
  --red-900: 183, 28, 28;

  --red-accent-100: 255, 138, 128;
  --red-accent-200: 255, 82, 82;
  --red-accent-400: 255, 23, 68;
  --red-accent-700: 213, 0, 0;

  /* `breakpoint-width` will be set to the screen size's current breakpoint; `100%` is a fallback value. The default is
  placed in `:root` since breakpoints are relevant to the page as a whole, not any specific element.

  `breakpoint-padding` is a similar case; it represents the amount of padding that should be added on the left and right
  of an element in order to center a rectangle of width `breakpoint-width` within the viewport. */

  --breakpoint-width: 100%;
  --breakpoint-padding: calc(0.5rem + (100% - var(--breakpoint-width)) / 2);
}

@media (min-width: 600px) {
  :root {
    --breakpoint-width: 600px;
  }
}

@media (min-width: 900px) {
  :root {
    --breakpoint-width: 900px;
  }
}

@media (min-width: 1200px) {
  :root {
    --breakpoint-width: 1200px;
  }
}

@media (min-width: 1536px) {
  :root {
    --breakpoint-width: 1536px;
  }
}

/* This is probably the single most important line of CSS in this entire stylesheet.
We abuse this to hell and back for the sake of making styling more predictable and everything would fall apart without
it. */

* {
  box-sizing: border-box;
}

/* We set a default font weight of 400, and allow it to to be inherited by child elements. While we could use a `*`
selector to set the font weight for all elements to 400, this would mess with semantic HTML elements like `b` or
`strong`, which is absolutely not something we want to be doing.

The font family is set here too and is inherited by literally everything. */

html,
body {
  min-height: 100vh;
  margin: 0;
  font-weight: 400;
  font-family: 'Noto', sans-serif;
}

/* The grid sections below equate to the following:

n = navbar
h = header
s = sidebar
c = content
f = footer

The sidebar and header sections will collapse if empty. */

body {
  display: grid;
  grid-template-areas:
    "n n n n"
    "h h h h"
    "s . c ."
    "f f f f";
  grid-template-columns: auto 1fr minmax(auto, var(--breakpoint-width)) 1fr;
  grid-template-rows: 3rem minmax(0, max-content) auto min-content;
}

main {
  grid-area: c;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100%;
  padding: 0.5rem;
}

@media (min-width: 900px) {
  main {
    text-align: left;
  }
}

/* Special styling for sections within the main content flow */

main > section {
  align-self: stretch;
  margin: 0.5rem;
}

/* Sections are card-like designs that comprise logical groups of content. They contain a header, a "content" section,
and an optional "actions" section. */

section {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  text-align: center;
  border-radius: 0.25rem;
  border: 1px solid rgb(var(--shade-500));
}

section > * {
  padding: 0.5rem;
}

section > :last-child {
  border-bottom-left-radius: 0.25rem;
  border-bottom-right-radius: 0.25rem;
}

/* We use plain ol' semantic HTML for the header part. No classes here ma'am! */

section > :is(h1, h2, h3, h4, h5, h6) {
  margin: 0;
  border-top-left-radius: 0.25rem;
  border-top-right-radius: 0.25rem;
  border-bottom: 1px solid rgb(var(--shade-500));
  background: rgb(var(--shade-200));
}

/* When we have section actions, we don't want to double up on borders. */

section > :is(h1, h2, h3, h4, h5, h6) + .actions {
  border-top: none;
}

section > .content {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
}

section > .content > * {
  flex-grow: 1;
}

section > .actions {
  display: flex;
  align-items: center;
  justify-content: center;
  border-top: 1px solid rgb(var(--shade-500));
}

section > .actions > * {
  flex-grow: 1;
}

/* The heading/typography styles are slightly involved, mostly due to the sheer number of parameters we tweak. A lot of
these values are sourced from the MUI typography styles, but I've tweaked a few values to tidy things up or make headers
slightly more visible. */

h1, h2, h3, h4, h5, h6 {
  font-weight: var(--header-weight);
  font-size: var(--header-size);
  line-height: var(--header-height);
  letter-spacing: var(--header-letter-spacing);
  margin-top: 0;
  margin-bottom: 0.5rem;
}

h1 {
  --header-weight: 300;
  --header-size: 6rem;
  --header-height: 1.167;
  --header-letter-spacing: -0.01562em;
}

h2 {
  --header-weight: 300;
  --header-size: 3.75rem;
  --header-height: 1.2;
  --header-letter-spacing: -0.00833em;
}

h3 {
  --header-weight: 400;
  --header-size: 3rem;
  --header-height: 1.167;
  --header-letter-spacing: 0em;
}

h4 {
  --header-weight: 400;
  --header-size: 2.125rem;
  --header-height: 1.235;
  --header-letter-spacing: 0.00735em;
}

h5 {
  --header-weight: 400;
  --header-size: 1.5rem;
  --header-height: 1.334;
  --header-letter-spacing: 0em;
}

h6 {
  --header-weight: 500;
  --header-size: 1.25rem;
  --header-height: 1.6;
  --header-letter-spacing: 0.0075em;
}

/* Paragraph styling needs no explanation */

p {
  margin: 0 0 0.5rem 0;
}

/* Buttons come in two different flavours:

1. Text buttons, which are standard, low-emphasis UI elements. They're most suitable when no further attention needs to
   be drawn to the button; this is often the case within modals or cards, where horizontal rules or other forms of
   visual separation will give the button sufficient attention.

2. Outlined buttons, which are medium-emphasis UI elements. They're often used as "secondary" buttons.

Additionally, there are several different "themes" of button:

1. The "primary" theme, used for general actions within the UI.
2. The "danger" theme, used specifically for dangerous/irrevocable actions.

There is also an `on-foreground` combinator, used for buttons that are placed on top of colored surfaces. These are
ideal for use in navigation menus and similar areas.

Each of these are styled below. Some styles are common to all forms of button. */

:is(.button, button, input[type='button']) {
  --button-padding-x: 1.25rem;
  --button-padding-y: 0.4rem;
  --button-width: 2rem;
  --button-height: 2.5rem;
  --button-font-size: 0.875rem;
  --icon-gutter: var(--button-padding-x);
  --icon-gutter-multiplier: 0.67;
  display: inline-flex;
  position: relative;
  top: 0;
  left: 0;
  padding: var(--button-padding-y) var(--button-padding-x);
  align-items: center;
  justify-content: center;
  min-width: var(--button-width);
  min-height: var(--button-height);
  line-height: 1.75;
  font-size: var(--button-font-size);
  letter-spacing: 0.02857em;
  font-weight: 500;
  border-radius: 0.25rem;
  transition: color 250ms, background 250ms, border 250ms;
}

/* We can't mix colours ourselves, but we can cheat by placing a solid color behind the button. */

:is(.button, button, input[type='button'])::before {
  display: inline-flex;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  width: 100%;
  height: 100%;
  content: '';
  border-radius: 0.25rem;
  background-color: rgb(var(--contrast-color));
}

/* Overloads for different button sizes */

:is(.button, button, input[type='button']).small {
  --button-padding-x: 0.34rem;
  --button-padding-y: 0.25rem;
  --button-height: 2rem;
  --button-font-size: 0.8125rem;
  --icon-gutter: 0.625rem;
}

:is(.button, button, input[type='button']).small.wider {
  --button-padding-x: 0.67rem;
}

:is(.button, button, input[type='button']).large {
  --button-padding-x: 1.375rem;
  --button-padding-y: 0.5rem;
  --button-height: 3rem;
  --button-font-size: 0.9375rem;
  --icon-gutter: 1.375rem;
}

/* Colors for each button theme */

:is(.button, button, input[type='button']) {
  --theme-base-color: var(--blue-500);
  --theme-hover-color: var(--blue-accent-100);
  --theme-contrast-color: 255, 255, 255;
  /* We need a layer of indirection so that contrasted buttons can re-wire colors. */
  --base-color: var(--theme-base-color);
  --hover-color: var(--theme-hover-color);
  --contrast-color: var(--theme-contrast-color);
  /* These aren't special though. */
  --hover-color-filled: var(--blue-600);
  --active-color-filled: var(--blue-400);
  --hover-opacity: 0.1375;
  --opacity-multiplier: 2;
}

:is(.button, button, input[type='button']).danger {
  --theme-base-color: var(--red-500);
  --theme-hover-color: var(--red-accent-100);
  --hover-color-filled: var(--red-600);
  --active-color-filled: var(--red-300);
}

:is(.button, button, input[type='button']).on-foreground {
  --base-color: var(--theme-contrast-color);
  --hover-color: var(--theme-contrast-color);
  --contrast-color: var(--theme-base-color);
}

:is(.button, button, input[type='button']).disabled {
  --opacity-multiplier: 1;
  --base-color: var(--shade-900);
  --hover-color: var(--shade-900);
  --contrast-color: 0, 0, 0;
  --hover-opacity: 0.05;
  cursor: not-allowed;
}

/* Text buttons have colored text with no outline and a transparent background. */

:is(.button, button, input[type='button']) {
  border: none;
  background: transparent;
  color: rgb(var(--base-color));
}

/* Outlined buttons have colored text and an outline, but a transparent background. */

:is(.button, button, input[type='button']).outlined {
  border: 1px solid rgb(var(--base-color));
  color: rgb(var(--base-color));
}

/* Filled buttons have a plain text color, but a filled background. */

:is(.button, button, input[type='button']).filled {
  border: none;
  background: rgb(var(--base-color));
  color: rgb(var(--contrast-color));
}

/* Hover and active styling for each button variety. Some styles are common to both text and outlined buttons. */

:is(.button, button, input[type='button']):hover {
  background: rgba(var(--hover-color), var(--hover-opacity));
}

:is(.button, button, input[type='button']):active {
  background: rgba(var(--hover-color), calc(var(--hover-opacity) * var(--opacity-multiplier)));
}

:is(.button, button, input[type='button']).filled:hover {
  background: rgb(var(--hover-color-filled));
}

:is(.button, button, input[type='button']).filled:active {
  background: rgb(var(--active-color-filled));
}

/* Clickable buttons shouldn't have an underline */

a.button {
  text-decoration: none;
}

/* Special styling for Bootstrap's icons. They need to be properly aligned within their bounding box */

.bi {
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

.bi::before {
  font-size: 1.25rem;
}

/* Special utility styling for icons/avatars within buttons */

:is(.button, button, input[type='button']) > .gutter-left {
  margin-left: calc(var(--icon-gutter) * var(--icon-gutter-multiplier));
}

:is(.button, button, input[type='button']) > .gutter-right {
  margin-right: calc(var(--icon-gutter) * var(--icon-gutter-multiplier));
}

/* Styling for links/anchors. We actually deviate a bit from what MUI does here, since their links are particularly
plain and I personally don't think they're emphasized enough. */

a:not(.button) {
  --base-color: var(--blue-500);
  --hover-color: var(--blue-accent-200);
  --active-color: var(--blue-accent-400);
  color: rgb(var(--base-color));
  text-decoration: 2px solid underline rgba(var(--hover-color), 0.5);
  transition: text-decoration 100ms, color 100ms;
}

a:not(.button).on-foreground {
  --base-color: 255, 255, 255;
  --hover-color: var(--shade-200);
  --active-color: var(--base-color);
}

a:not(.button):hover {
  text-decoration: 2px solid underline rgba(var(--hover-color), 0.75);
}

a:not(.button):active {
  color: rgb(var(--active-color));
  text-decoration: 2px solid underline rgb(var(--hover-color));
}

/* Generic form styling. We limit their max width so that form content is easy on the eyes. */

form:not(.unstyled) {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  justify-content: center;
  padding: 0.25rem;
  width: 100%;
  max-width: 40rem;
}

form:not(.unstyled) > * {
  flex-shrink: 1;
  flex-grow: 1;
  margin: 0.25rem;
}

/* Styling for labels and form elements. These don't change across screen sizes. */

label {
  display: flex;
  justify-content: center;
  align-items: center;
}

input,
select {
  padding: 0.5rem;
  border-radius: 0.25rem;
  border: 1px solid rgb(var(--shade-500));
  background: white;
}

input:invalid,
select:invalid {
  border: 1px solid rgb(var(--red-300));
  outline: 0.125rem solid rgba(var(--red-500), 0.5);
}

/* Checkbox-specific styling. We display them as switches rather than checkboxes, and animate the state transitions. */

input[type="checkbox"] {
  --border-color: var(--shade-500);
  -webkit-appearance: none;
  display: block;
  box-sizing: border-box;
  position: relative;
  top: 0;
  left: 0;
  width: 3rem;
  height: 1.5rem;
  appearance: none;
  border-radius: 0.75rem;
  border: 1px solid rgb(var(--border-color));
  box-shadow: 0px 1px 4px 0px rgba(var(--border-color), 0.45);
  background: rgb(var(--shade-400));
  transition: background 150ms ease, border 150ms ease;
}

input[type="checkbox"]:checked {
  --border-color: var(--blue-600);
  background: rgb(var(--blue-300));
}

input[type="checkbox"]::after {
  box-sizing: border-box;
  position: absolute;
  top: 50%;
  left: -1px;
  display: block;
  width: 1.5rem;
  height: 1.5rem;
  border-radius: 50%;
  border: 1px solid rgb(var(--border-color));
  background: rgb(var(--shade-100));
  background-size: contain;
  box-shadow: 0px 1px 4px 0px rgba(0, 0, 0, 0.15);
  content: "";
  transform: translateY(-50%);
  transition: left 150ms ease, border 150ms ease;
}

input[type="checkbox"]:checked::after {
  left: calc(1.5rem - 1px);
}

/* Styles common to input and switch groups */

.switch-group,
.input-group {
  display: flex;
  align-items: center;
  justify-content: stretch;
  max-width: 100%;
}

/* Input groups display a shaded label adjacent to a form element. */

.input-group > select,
.input-group > input,
.input-group > label {
  border-radius: 0;
  border: 1px solid rgb(var(--shade-500));
}

.input-group > :first-child {
  border-top-left-radius: 0.25rem;
  border-bottom-left-radius: 0.25rem;
}

.input-group > :last-child {
  border-top-right-radius: 0.25rem;
  border-bottom-right-radius: 0.25rem;
}

.input-group > label {
  font-size: 0.825rem;
}

.input-group > label:first-child:not(:last-child) {
  border-right: unset;
}

.input-group > label:last-child:not(:first-child) {
  border-left: unset;
}

.input-group > label {
  padding: 0.5rem;
  background: rgb(var(--shade-200));
}

.input-group > select,
.input-group > input {
  width: 6rem;
  flex-grow: 1;
}

/* Switch groups display a switch input with an adjacent label */

.switch-group {
  justify-content: center;
}

.switch-group > input[type="checkbox"] {
  margin: 0 0.5rem;
}

/* Avatars are used to display user profile pictures and other forms of small, decorative icon */

.avatar {
  --avatar-size: 3rem;
  width: var(--avatar-size);
  height: var(--avatar-size);
  border-radius: calc(var(--avatar-size) / 2);
  object-fit: cover;
}

.avatar.small {
  --avatar-size: 2rem;
}

.avatar.large {
  --avatar-size: 4rem;
}

/* This is a small utility class for styling muted/dull text */

.text-secondary {
  color: rgb(var(--shade-800));
}

/* Another small utility class, this time for "subtitle" text */

.text-subtitle {
  text-transform: uppercase;
  font-size: 0.75rem;
  letter-spacing: 0.05em;
}

/* Another small utility class. Wow! This is just used for paragraphs that need slightly more emphasis. */

.heavy-margin {
  margin: 0.5rem 0;
}

/* The section following contains styles for structural page elements - such as sidebars and navbars - rather than
styles for more generic elements, as above.  */

/* The styling for the navbar is fairly straightforward, but there's still a lot of switching things around involved.
For the sake of different device form factors, we have three different navbar layouts:

- The "mobile" navbar, consisting of a logo, navigation buttons that use icons, and a button to toggle the sidebar as a
  full-screen menu.
- The "tablet" navbar, consisting of a logo, navigation buttons in text form, and a button to toggle the sidebar as a
  full-screen menu.
- The "desktop" navbar, consisting of a logo, navigation buttons in text form, the user's avatar (if applicable) and an
  action button to log in/out.

Our general approach is "mobile-first" - we use the mobile navbar as the default style, and then modify things using
media queries as the display width changes. */

#nav {
  --contrast-color: white;
  --menu-color: var(--blue-500);
  grid-area: n;
  display: flex;
  position: sticky;
  top: 0;
  left: 0;
  /* we need to make sure the navbar displays on top of regular content.  */
  z-index: 2;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  flex-wrap: nowrap;
  padding: 0.5rem;
  color: var(--contrast-color);
  background: rgb(var(--menu-color));
}

/* We use an explicit spacer element to avoid juggling the element that's used to fill space within the navbar. */

.spacer {
  flex-grow: 1;
}

/* It's unlikely that these navbar colors will ever actually see use, but hey. */

#nav.danger {
  --menu-color: var(--red-500);
}

#nav.monochrome {
  --menu-color: var(--shade-900);
}

/* We add a little bit of margin to each item in the navbar so that buttons don't look cramped. */

#nav > * + * {
  margin-left: 0.5rem;
}

/* The styling for the logo isn't particularly special; we just fit it to 32x32. */

#nav .logo {
  display: block;
  width: 2rem;
  height: 2rem;
  object-fit: scale-down;
}

/* The text in navigation links isn't displayed by default. It's enabled on larger screen sizes */

#nav .nav-link {
  font-size: 0;
  font-weight: bolder;
}

/* The user's avatar - and the button next to it! - shouldn't be displayed by default. */

#nav .avatar,
#nav .avatar + .button {
  display: none;
}

@media (min-width: 600px) {
  /* On larger displays, the navbar contents are justified to the left, instead of centered. We do this by hiding the
  first spacer */
  #nav .spacer:first-of-type {
    display: none;
  }

  /* On larger displays, we do a few things:

  1. reset the button properties that we modified
  2. make the text visible
  3. hide the icons

  Icons aren't strictly necessary on the desktop/tablet versions of the page. */

  #nav .nav-link {
    min-width: var(--button-width);
    font-size: var(--button-font-size);
  }

  #nav .nav-link .bi {
    display: none;
  }
}

@media (min-width: 900px) {
   /* The menu toggle isn't used on larger displays */
   #sidebar-menu-toggle {
    display: none;
  }

  /* The user's avatar is only shown on larger displays */
  #nav .avatar {
    display: block;
  }

  /* It's the same story for the the log in/out button */
  #nav .avatar + .button {
    display: inline-flex;
  }
}

/* I think the styling for this can probably be expanded at some point, but for now this is fine. The footer is very
bare as it is. */

#footer {
  grid-area: f;
  padding: 0.5rem;
  text-align: right;
  border-top: 1px solid rgb(var(--shade-500));
  background: rgb(var(--shade-200));
}

/* On mobile displays, the sidebar isn't shown by default. However, it does set some defaults that persist for the
desktop variant. Most notably, these are the alignment/layout properties, along with the background. */

#sidebar {
  grid-area: s;
  display: none;
  flex-direction: column;
  justify-content: start;
  align-items: stretch;
  overflow: scroll;
  background: white;
}

/* These rules are only relevant on smaller displays */

@media (max-width: 899.999px) {
  #sidebar.displayed {
    display: flex;
    position: fixed;
    top: 3rem;
    left: 0;
    z-index: 2;
    width: 100%;
    height: calc(100vh - 3rem);
  }
}

#mobile-sidebar-actions {
  display: flex;
  position: relative;
  top: 0;
  left: 0;
  z-index: 2;
  width: 100%;
  padding: 0.5rem;
  align-content: center;
  background: rgb(var(--blue-600));
  border-top: 1px solid rgb(var(--blue-700));
  border-bottom: 1px solid rgb(var(--shade-500));
}

#mobile-sidebar-actions > .avatar {
  margin-right: 0.5rem;
}

#mobile-sidebar-actions > .button {
  flex-grow: 1;
  padding-right: calc(2.5rem + var(--button-padding-x));
}

/* On "desktop" displays, the sidebar is only shown if it's on a page that actually enables it */

@media (min-width: 900px) {
  #mobile-sidebar-actions {
    display: none;
  }

  #sidebar:not(.enabled) {
    display: none;
  }

  #sidebar.enabled {
    display: flex;
    position: sticky;
    top: 3rem;
    left: 0;
    z-index: 2;
    width: 16rem;
    height: calc(100vh - 3rem);
    border-right: 1px solid rgb(var(--shade-500));
  }
}

#header {
  grid-area: h;
}

/* Moving on from more "structural" styling, we now encroach upon the page-specific styles. The first of these is the
landing page hero header.  */

/* The hero styling is somewhat involved. The exact layout and padding changes depending on the screen size; content
flows horizontally on larger displays, but vertically on smaller ones, for example. */

.hero {
  --hero-padding: 3rem;
  --hero-grid: 50% 50% / 100%;
  display: grid;
  height: 48rem;
  width: 100%;
  justify-items: center;
  align-items: center;
  grid: var(--hero-grid);
  padding: var(--hero-padding) var(--breakpoint-padding);
  background-image: linear-gradient(to bottom, transparent 50%, #EEEEFF);
  border-bottom: 1px solid rgb(var(--shade-500));
}

@media (min-width: 600px) {
  .hero {
    --hero-padding: 4rem;
  }
}

@media (min-width: 900px) {
  .hero {
    --hero-padding: 8rem;
    --hero-grid: 100% / 50% 50%;
  }
}

/* TODO: use more `>` */

.hero > * {
  display: flex;
  align-items: center;
  justify-content: center;
}

.hero .cat {
  width: 75%;
  height: 75%;
  object-fit: scale-down;
}

.hero .actions {
  display: flex;
  width: 75%;
  flex-direction: column;
  align-items: stretch;
  justify-content: center;
}

@media (min-width: 900px) {
  .hero .actions {
    flex-direction: row;
  }
}

.hero .actions > * {
  flex-grow: 1;
  margin: 0.5rem;
}

.hero .info {
  flex-direction: column;
  text-align: center;
}

.hero .heading {
  font-weight: bold;
}

.hero .heading .gradient {
  font-weight: bold;
  background-image: linear-gradient(to right, #4392F1, #1170E4);
  color: transparent;
  background-clip: text;
}

/* Styles for the "guild panel" in the sidebar. This panel shows the currently selected guild (if applicable) as well as
an avatar and a list of action buttons. */

.guild-panel {
  display: flex;
  flex-direction: column;
  padding: 0.5rem;
  width: 100%;
  border-bottom: 1px solid rgb(var(--shade-500));
  background: rgb(var(--shade-100));
}

.guild-panel > .no-selection,
.guild-panel > .guild-selected {
  display: flex;
  align-items: center;
  justify-content: center;
}

/* When there's no selection, we display a "nothing selected" note on top of a shaded background. */

.guild-panel > .no-selection {
  padding: 0.25rem 0.5rem;
  width: 100%;
}

.guild-panel > .no-selection > .bi {
  margin-right: 0.5rem;
}

.guild-panel > .no-selection > .bi::before {
  font-size: 1rem;
}

.guild-panel > .no-selection > .bi + i {
  font-size: 0.865rem;
  text-align: center;
}

/* When there *is* a selection, we display an avatar, a guild name and a small "selected" note. */

.guild-panel > .guild-selected > .avatar {
  margin-right: 0.5rem;
  background: white;
  border: 1px solid rgb(var(--shade-500));
}

.guild-panel > .guild-selected > .text {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 100%;
  margin-right: 3.5rem;
  text-align: center;
}

.guild-panel > .guild-selected > .text > i {
  font-size: 0.865rem;
}

/* Navigation buttons for the selected guild  */

.guild-panel > .guild-nav-buttons {
  display: flex;
  flex-direction: column;
  padding: 0.5rem 0 0 0;
}

.guild-panel > .guild-nav-buttons > * + * {
  margin-top: 0.5rem;
}

/* The guild selection panel. This is a drop-down-esque menu that can be used to select a guild to view/edit. */

.guild-selector {
  display: flex;
  flex-direction: column;
  width: 100%;
}

.guild-selector > .guilds {
  padding: 0.125rem 0;
  background: rgb(var(--shade-100));
  border-bottom: 1px solid rgb(var(--shade-500));
}

.guild-selector > .guilds > * {
  margin: 0.125rem 0;
}

.guild-selector > .guilds > .guild {
  display: flex;
  justify-content: start;
  align-items: center;
  border-radius: 0;
}

.guild-selector > .guilds > .guild > .name {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-grow: 1;
}

.guild-selector > .guilds > .guild > .bi {
  width: 2rem;
}

/* Styling for the "servers" button, which toggles the list of guilds in the guild selector */

.button.guild-list-toggle {
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 2.5rem;
  border-radius: 0;
  border-bottom: 1px solid rgb(var(--shade-500));
}

.button.guild-list-toggle > .text {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-left: 2.5rem;
  flex-grow: 1;
  font-weight: bolder;
}

.button.guild-list-toggle > .bi {
  width: 2rem;
  height: 2rem;
  color: inherit;
}

.button.guild-list-toggle > .bi::before {
  font-size: 0.85rem;
}

/* Opening and closing animations for the "servers" button */

.guild-selector > .button.guild-list-toggle > .bi::before {
  transition: transform 250ms;
}

.guild-selector[open] > .button.guild-list-toggle > .bi::before {
  transform: rotate(90deg);
}

/* Styling for the actual guild selection screen. This isn't too involved, thanks to the use of grids. */

.guild-list {
  display: grid;
  grid-template-rows: repeat(auto-fit, minmax(3rem, max-content));
  grid-template-columns: repeat(auto-fit, minmax(min-content, 32rem));
  justify-content: center;
  align-content: center;
  width: 100%;
  margin: 0.5rem;
  gap: 0.5rem;
}

.guild-list > .guild {
  display: grid;
  grid-template-columns: max-content auto max-content;
  justify-items: center;
  align-items: center;
  border-radius: 0.25rem;
  border: 1px solid rgb(var(--shade-500));
}

.guild-list > .guild > .avatar-wrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 0.5rem;
  background: rgb(var(--shade-200));
  border-top-left-radius: 0.25rem;
  border-bottom-left-radius: 0.25rem;
  border-right: 1px solid rgb(var(--shade-500));
}

.guild-list > .guild > .avatar-wrapper > .avatar {
  border: 1px solid rgb(var(--shade-500));
}

.guild-list > .guild > .name {
  display: flex;
  margin: 0.5rem;
}

.guild-list > .guild > .button {
  margin: 0.5rem;
}

/* Styling for the leaderboard navigation; this is a sort of floating navbar for switching between pages. */

.leaderboard-nav {
  display: flex;
  position: sticky;
  top: 3.5rem;
  left: 0;
  justify-content: center;
  align-items: center;
  margin-bottom: 0.5rem;
  padding: 0.5rem;
  width: 100%;
  background: rgb(var(--shade-200));
  border: 1px solid rgb(var(--shade-500));
  border-radius: 0.25rem;
  box-shadow: 0px 1px 4px 0px rgba(0, 0, 0, 0.15);
}

.leaderboard-nav > .button {
  --button-width: 3rem;
  --button-padding-x: var(--button-padding-y);
}

.leaderboard-nav > .button::before {
  display: none;
}

.leaderboard-nav > .text {
  flex-grow: 1;
  text-align: center;
}

/* Some rank-card specific styling for the logged-in dashboard page */

.rank-card-wrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  align-self: center;
  max-width: 40rem;
  margin-top: 0.5rem;
  border-radius: 0.25rem;
  border: 1px solid rgb(var(--shade-500));
  background: rgb(var(--shade-200));
  box-shadow: 0px 1px 4px 0px rgba(0, 0, 0, 0.15);
}

.rank-card-wrapper > img {
  object-fit: scale-down;
  height: 100%;
  width: 100%;
}

/* Some utility styling for inline notes */

.notes {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  margin-bottom: 0.5rem
}

.notes > .note {
  border: 1px solid rgb(var(--shade-500));
  border-radius: 2rem;
  background: rgb(var(--shade-100));
  color: rgb(var(--shade-900));
  font-size: 0.875rem;
}

.notes > .note + .note {
  margin-top: 0.5rem;
}

.note {
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  flex-wrap: wrap;
  padding: 0.25rem;
}

.note > * {
  margin: 0.25rem;
}

/* The grid styling takes a mix-in sort of approach. The `grid`, `row`, `shaded` and `heading` classes are the core set
of tools for making grid layouts. Anything with the `grid` class will need a `grid-template-columns` property mixed in
externally, but pretty much everything else is handled by the `grid` class.

The `row` wrapper is particularly important; we use `display: content` on `row` so that child elements are still part
of the grid. Having explicit "wrapper" elements like this makes some styling operations significantly easier, which is
why they're used.

The `heading` class can be applied to a row to mark it as a heading row. Heading rows do not have borders and
display text in a "subtitle" style. They're intended to be used for column labels and such.

The `shaded` class simply shades the background of the cell it's applied to. */

.grid {
  --grid-gap: 0.25rem;
  display: grid;
  row-gap: var(--grid-gap);
  width: 100%;
}

.grid > .heading {
  text-transform: uppercase;
  font-size: 0.75rem;
  letter-spacing: 0.05em;;
}

.grid > .row {
  display: contents;
}

.grid > .row > * {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: var(--grid-gap);
  text-align: center;
  overflow-wrap: break-word;
}

.grid > .row > .shaded {
  background: rgb(var(--shade-100));
}

.grid > .row.heading > * {
  padding: 0 var(--grid-gap);
}

.grid > .row:not(.heading) > * {
  border: 1px solid rgb(var(--shade-500));
}

.grid > .row:not(.heading) > * + * {
  border-left: unset;
}

.grid > .row:not(.heading) > :first-child {
  border-top-left-radius: 0.25rem;
  border-bottom-left-radius: 0.25rem;
}

.grid > .row:not(.heading) > :last-child {
  border-top-right-radius: 0.25rem;
  border-bottom-right-radius: 0.25rem;
}

@media (min-width: 600px) {
  /* On larger displays, we increase the gap size to give things some more breathing room */
  .grid  {
    --grid-gap: 0.5rem
  }
}

/* Below follows the styling for specific grid layouts */

/* 1: The guild leaderboard. This has the most sophisticated styling out of all of them, mostly owing to the progress
indicator and the "collapsing" XP column. */

.grid.leaderboard {
  --column-width: 2.5rem;
  --column-inner-size: 2rem;

  grid-template-columns:
    minmax(3rem, max-content)
    var(--column-width)
    auto
    var(--column-width);
}

.grid.leaderboard > .row > .avatar-wrapper > .avatar {
  --avatar-size: var(--column-inner-size);
  border: 1px solid rgb(var(--shade-500));
}

/* We cut back a little bit on the font size so that there's enough space for longer usernames */

.grid.leaderboard > .row > .name {
  font-size: 0.875rem;
}

/* The XP column is only shown on larger displays */

.grid.leaderboard > .row > .xp {
  display: none;
}

.grid.leaderboard > .row > .level {
  font-weight: bolder;
}

.grid.leaderboard > .row > .level > .progress {
  display: flex;
  justify-content: center;
  align-items: center;
  width: var(--column-inner-size);
  height: var(--column-inner-size);
  text-align: center;
  font-size: 0.875rem;
  border-radius: 50%;
  background:
    radial-gradient(
      white calc(60% - 1px),
      transparent 60%
    ),
    conic-gradient(
      rgb(var(--blue-accent-400)) 0turn,
      rgb(var(--blue-accent-400)) var(--progress),
      rgb(var(--shade-400)) var(--progress) 1turn
    );
}

@media (min-width: 600px) {
  /* The member's total XP is only shown when there's enough space */
  .grid.leaderboard {
    --column-width: 4rem;
    --column-inner-size: 3rem;

    grid-template-columns:
      minmax(2rem, max-content)
      var(--column-width)
      auto
      minmax(var(--column-width), max-content)
      minmax(var(--column-width), max-content);
  }

  /* We need to un-hide the XP column */
  .grid.leaderboard > .row > .xp {
    display: flex;
  }
}

/* 2. The autorole list. This *was* going to be simpler, but the editing/viewing styles and the inline level textbox
make it a bit more involved. Sorry! */

.grid.autoroles.managed {
  grid-template-columns:
    minmax(4rem, max-content)
    auto
    minmax(3rem, max-content);
}

/* When a member doesn't manage a guild, we don't show an actions column. */

.grid.autoroles.unmanaged {
  grid-template-columns:
    minmax(4rem, max-content)
    auto;
}

/* We use `*` rather than targeting a specific element so that these styles will be applied regardless of whether a user
can manage a guild.*/

.grid.autoroles > .row > .level > * {
  max-width: 100%;
  text-align: center;
  font-style: italic;
  font-size: 1rem;
}

.grid.autoroles.managed > .row > .level > input:valid {
  color: rgb(var(--blue-600));
  border: 2px solid rgb(var(--blue-500));
  background: rgba(var(--blue-100), 0.125);
}

.grid.autoroles.managed > .row > .level > input:invalid {
  border: 2px dashed rgb(var(--shade-500));
  background: rgb(var(--shade-100));
  outline: none;
}

.grid.autoroles.managed > .row > .level > input::placeholder {
  opacity: 100;
}

.grid.autoroles.managed > .row > .actions {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: calc(var(--grid-gap) / 2);
}

.grid.autoroles.managed > .row > .actions > button {
  margin: calc(var(--grid-gap) / 2);
}

.grid.autoroles.managed > .row > .actions.show-edit > .delete-button,
.grid.autoroles.managed > .row > .actions.show-delete > .edit-button {
  display: none;
}
