@import url("https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&display=swap");
@import url("https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css");

:root {
  /* These are unpacked RGB tuples. Because of the way CSS variables work, we can pass these to `rgb`, and additionally
  we can use `rgba` if variable transparency is necessary. */

  --shade-100: 250, 250, 250;
  --shade-200: 245, 245, 245;
  --shade-300: 240, 240, 240;
  --shade-400: 222, 222, 222;
  --shade-500: 194, 194, 194;
  --shade-600: 151, 151, 151;
  --shade-700: 129, 129, 129;
  --shade-800: 96, 96, 96;
  --shade-900: 60, 60, 60;

  --blue-50: 227, 242, 253;
  --blue-100: 187, 222, 251;
  --blue-200: 144, 202, 249;
  --blue-300: 100, 181, 246;
  --blue-400: 66, 165, 245;
  --blue-500: 33, 150, 243;
  --blue-600: 30, 136, 229;
  --blue-700: 25, 118, 210;
  --blue-800: 21, 101, 192;
  --blue-900: 13, 71, 161;

  --blue-accent-100: 130, 177, 255;
  --blue-accent-200: 68, 138, 255;
  --blue-accent-400: 41, 121, 255;
  --blue-accent-700: 41, 98, 255;

  --red-50: 255, 235, 238;
  --red-100: 255, 205, 210;
  --red-200: 239, 154, 154;
  --red-300: 229, 115, 115;
  --red-400: 239, 83, 80;
  --red-500: 244, 67, 54;
  --red-600: 229, 57, 53;
  --red-700: 211, 47, 47;
  --red-800: 198, 40, 40;
  --red-900: 183, 28, 28;

  --red-accent-100: 255, 138, 128;
  --red-accent-200: 255, 82, 82;
  --red-accent-400: 255, 23, 68;
  --red-accent-700: 213, 0, 0;

  /* `breakpoint-width` will be set to the screen size's current breakpoint; `100%` is a fallback value. The default is
  placed in `:root` since breakpoints are relevant to the page as a whole, not any specific element.

  `breakpoint-padding` is a similar case; it represents the amount of padding that should be added on the left and right
  of an element in order to center a rectangle of width `breakpoint-width` within the viewport. */

  --breakpoint-width: 100%;
  --breakpoint-padding: calc(0.5rem + (100% - var(--breakpoint-width)) / 2);
}

@media (min-width: 600px) {
  :root {
    --breakpoint-width: 600px;
  }
}

@media (min-width: 900px) {
  :root {
    --breakpoint-width: 900px;
  }
}

@media (min-width: 1200px) {
  :root {
    --breakpoint-width: 1200px;
  }
}

@media (min-width: 1536px) {
  :root {
    --breakpoint-width: 1536px;
  }
}

* {
  box-sizing: border-box;
  font-family: 'Noto', sans-serif;
  font-weight: 400;
}

html,
body {
  height: 100%;
  margin: 0;
}

h1, h2, h3, h4, h5, h6 {
  --gutter-bottom: 0;
  --gutter-top: 0;
  font-weight: var(--header-weight);
  font-size: var(--header-size);
  line-height: var(--header-height);
  letter-spacing: var(--header-letter-spacing);
  margin-top: calc(var(--gutter) * var(--gutter-top));
  margin-bottom: calc(var(--gutter) * var(--gutter-bottom));
}

h1 {
  --header-weight: 300;
  --header-size: 6rem;
  --header-height: 1.167;
  --header-letter-spacing: -0.01562em;
  --gutter: 0.67rem;
}

h2 {
  --header-weight: 300;
  --header-size: 3.75rem;
  --header-height: 1.2;
  --header-letter-spacing: -0.00833em;
  --gutter: 0.83rem;
}

h3 {
  --header-weight: 400;
  --header-size: 3rem;
  --header-height: 1.167;
  --header-letter-spacing: 0em;
  --gutter: 1.00rem;
}

h4 {
  --header-weight: 400;
  --header-size: 2.125rem;
  --header-height: 1.235;
  --header-letter-spacing: 0.00735em;
  --gutter: 1.33rem;
}

h5 {
  --header-weight: 400;
  --header-size: 1.5rem;
  --header-height: 1.334;
  --header-letter-spacing: 0em;
  --gutter: 1.67rem;
}

h6 {
  --header-weight: 500;
  --header-size: 1.25rem;
  --header-height: 1.6;
  --header-letter-spacing: 0.0075em;
  --gutter: 2.33rem;
}

/* Buttons come in three different flavours:

1. Text buttons, which are standard, low-emphasis UI elements. They're most suitable when no further attention needs to
   be drawn to the button; this is often the case within modals or cards, where horizontal rules or other forms of
   visual separation will give the button sufficient attention.

2. Outlined buttons, which are medium-emphasis UI elements. They're often used as "secondary" buttons.

3. Filled buttons, which are a high-emphasis part of the UI. They're often used for primary actions within the
   application.

Additionally, there are several different "themes" of button:

1. The "primary" theme, used for general actions within the UI.
2. The "danger" theme, used specifically for dangerous/irrevocable actions.

There is also an `on-foreground` combinator, used for buttons that are placed on top of colored surfaces. These are
ideal for use in navigation menus and similar areas.

Each of these are styled below. Some styles are common to all forms of button. */

:is(.button, button, input[type='button']) {
  --button-padding-x: 1.25rem;
  --button-padding-y: 0.4rem;
  --button-width: 2rem;
  --button-height: 2.5rem;
  --button-font-size: 0.875rem;
  --icon-gutter: var(--button-padding-x);
  --icon-gutter-multiplier: 0.67;
  display: inline-flex;
  position: relative;
  top: 0;
  left: 0;
  padding: var(--button-padding-y) var(--button-padding-x);
  align-items: center;
  justify-content: center;
  min-width: var(--button-width);
  min-height: var(--button-height);
  line-height: 1.75;
  font-size: var(--button-font-size);
  letter-spacing: 0.02857em;
  font-weight: 500;
  border-radius: 0.25rem;
  transition: color 250ms, background 250ms, border 250ms;
}

/* We can't mix colours ourselves, but we can cheat by placing a solid color behind the button. */

:is(.button, button, input[type='button'])::before {
  display: inline-flex;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  width: 100%;
  height: 100%;
  content: '';
  border-radius: 0.25rem;
  background: rgb(var(--contrast-color));
}

/* Overloads for different button sizes */

:is(.button, button, input[type='button']).small {
  --button-padding-x: 0.34rem;
  --button-padding-y: 0.25rem;
  --button-height: 2rem;
  --button-font-size: 0.8125rem;
  --icon-gutter: 0.625rem;
}

:is(.button, button, input[type='button']).large {
  --button-padding-x: 1.375rem;
  --button-padding-y: 0.5rem;
  --button-height: 3rem;
  --button-font-size: 0.9375rem;
  --icon-gutter: 1.375rem;
}

/* Colors for each button theme */

:is(.button, button, input[type='button']) {
  --theme-base-color: var(--blue-500);
  --theme-hover-color: var(--blue-accent-100);
  --theme-contrast-color: 255, 255, 255;
  /* We need a layer of indirection so that contrasted buttons can re-wire colors. */
  --base-color: var(--theme-base-color);
  --hover-color: var(--theme-hover-color);
  --contrast-color: var(--theme-contrast-color);
  /* These aren't special though. */
  --hover-color-filled: var(--blue-600);
  --active-color-filled: var(--blue-300);
  --hover-opacity: 0.1375;
}

:is(.button, button, input[type='button']).danger {
  --theme-base-color: var(--red-500);
  --theme-hover-color: var(--red-accent-100);
  --hover-color-filled: var(--red-600);
  --active-color-filled: var(--red-300);
}

:is(.button, button, input[type='button']).on-foreground {
  --base-color: var(--theme-contrast-color);
  --hover-color: var(--theme-contrast-color);
  --contrast-color: var(--theme-base-color);
}

/* Text buttons have colored text with no outline and a transparent background. */

:is(.button, button, input[type='button']) {
  border: none;
  background: transparent;
  color: rgb(var(--base-color));
}

/* Outlined buttons have colored text and an outline, but a transparent background. */

:is(.button, button, input[type='button']).outlined {
  border: 1px solid rgb(var(--base-color));
  color: rgb(var(--base-color));
}

/* Filled buttons have a plain text color, but a filled background. */

:is(.button, button, input[type='button']).filled {
  border: none;
  background: rgb(var(--base-color));
  color: rgb(var(--contrast-color));
}

/* Hover and active styling for each button variety. Some styles are common to both text and outlined buttons. */

:is(.button, button, input[type='button']):hover {
  background: rgba(var(--hover-color), var(--hover-opacity));
}

:is(.button, button, input[type='button']):active {
  background: rgba(var(--hover-color), calc(var(--hover-opacity) * 2));
}

:is(.button, button, input[type='button']).filled:hover {
  background: rgb(var(--hover-color-filled));
}

:is(.button, button, input[type='button']).filled:active {
  background: rgb(var(--active-color-filled));
}

/* Clickable buttons shouldn't have an underline */

a.button {
  text-decoration: none;
}

/* Special styling for Bootstrap's icons. They need to be properly aligned within their bounding box */

.bi {
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

.bi::before {
  font-size: 1.25rem;
}

/* Special utility styling for icons/avatars within buttons */

:is(.button, button, input[type='button']) > .gutter-left {
  margin-left: calc(var(--icon-gutter) * var(--icon-gutter-multiplier));
}

:is(.button, button, input[type='button']) > .gutter-right {
  margin-right: calc(var(--icon-gutter) * var(--icon-gutter-multiplier));
}

/* Special styling for buttons that:

- only contain an icon
- should be "collapsed" on tablet displays

In both cases, their minimum width is set to a smaller value, and any text is hidden. For "collapsed" buttons, altered
properties will return to normal once the screen width is less than 600px or greater than 900px. This means that buttons
are more compact in the tablet-sized navbar, but don't require re-styling in the mobile navbar. */

:is(.button, button, input[type='button']).icon-only {
  --icon-gutter-multiplier: 0;
  --button-font-size: 0;
  --button-padding-x: auto;
  --button-width: 2rem;
}

@media (min-width: 600px) and (max-width: 899.999px) {
  :is(.button, button, input[type='button']).tablet-collapse {
    --icon-gutter-multiplier: 0;
    --button-font-size: 0;
    --button-width: 2rem;
  }
}

/* Styling for links/anchors. We actually deviate a bit from what MUI does here, since their links are particularly
plain and I personally don't think they're emphasized enough. */

a:not(.button) {
  --base-color: var(--blue-500);
  --hover-color: var(--blue-accent-200);
  --active-color: var(--blue-accent-400);
  color: rgb(var(--base-color));
  text-decoration: 2px solid underline rgba(var(--hover-color), 0.5);
  transition: text-decoration 100ms, color 100ms;
}

a:not(.button).on-foreground {
  --base-color: 255, 255, 255;
  --hover-color: var(--shade-200);
  --active-color: var(--base-color);
}

a:not(.button):hover {
  text-decoration: 2px solid underline rgba(var(--hover-color), 0.75);
}

a:not(.button):active {
  color: rgb(var(--active-color));
  text-decoration: 2px solid underline rgb(var(--hover-color));
}

/* The container primitive. This is a simple responsive content wrapper for centering children. */

.container {
  display: block;
  padding: 0.5rem var(--breakpoint-padding);
  width: 100%;
  max-width: var(--breakpoint-width) - 2rem;
}

/* Avatars are used to display user profile pictures and other forms of small, decorative icon */

.avatar {
  --avatar-size: 3rem;
  width: var(--avatar-size);
  height: var(--avatar-size);
  border-radius: calc(var(--avatar-size) / 2);
  object-fit: cover;
}

.avatar.small {
  --avatar-size: 2rem;
}

.avatar.large {
  --avatar-size: 4rem;
}

/* The styling for the navbar is fairly straightforward, but there's still a lot of switching things around involved.
For the sake of mobile devices, we have two different navbar layouts:

- The "mobile" navbar, consisting of a logo, navigation buttons that use icons, and a button to toggle the sidebar as a
  full-screen menu.
- The "desktop" navbar, consisting of a logo, navigation buttons in text form, the user's avatar (if applicable) and an
  action button to log in/out.

Our general approach is "mobile-first" - we use the mobile navbar as the default style, and then modify things using
media queries as the display width changes. */

#nav {
  --contrast-color: white;
  --menu-color: var(--blue-500);
  display: flex;
  position: sticky;
  top: 0;
  left: 0;
  /* we need to make sure the navbar displays on top of regular content.  */
  z-index: 1;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  flex-wrap: nowrap;
  padding: 0.5rem var(--breakpoint-padding);
  height: 3rem;
  max-width: 100%;
  color: var(--contrast-color);
  background: rgb(var(--menu-color));
}

/* We use an explicit spacer element to avoid juggling the element that's used to fill space within the navbar. */

.spacer {
  flex-grow: 1;
}

/* It's unlikely that these navbar colors will ever actually see use, but hey. */

#nav.danger {
  --menu-color: var(--red-500);
}

#nav.monochrome {
  --menu-color: var(--shade-900);
}

/* We add a little bit of margin to each item in the navbar so that buttons don't look cramped. */

#nav > * + * {
  margin-left: 0.5rem;
}

/* The styling for the logo isn't particularly special; we just fit it to 32x32. */

#nav .logo {
  display: block;
  width: 2rem;
  height: 2rem;
  object-fit: scale-down;
}

/* The list icon is very hard to see unless we dramatically increase the font size. I'm unsure why. */

#nav .bi-list::before {
  font-size: 1.75rem;
}

/* The text in navigation links isn't displayed by default. It's enabled on larger screen sizes */

#nav .nav-link {
  font-size: 0;
  font-weight: bolder;
}

/* This is an ugly hack, but it stops us from needing to use JS to mess with icon classes */

#nav.menu-active #show-sidebar-menu  {
  display: none;
}

#nav:not(.menu-active) #close-sidebar-menu  {
  display: none;
}

/* The user's avatar - and the button next to it! - shouldn't be displayed by default. */

#nav .avatar,
#nav .avatar + .button {
  display: none;
}

@media (min-width: 600px) {
  /* On larger displays, the navbar contents are justified to the left, instead of centered. We do this by hiding the
  first spacer */
  #nav .spacer:first-of-type {
    display: none;
  }

  /* The menu toggle isn't used on larger displays */
  #sidebar-menu-toggle {
    display: none;
  }

  /* The user's avatar is only shown on larger displays */
  #nav .avatar {
    display: block;
  }

  /* It's the same story for the the log in/out button */
  #nav .avatar + .button {
    display: inline-flex;
  }

  /* On larger displays, we do a few things:

  1. reset the button properties that we modified
  2. make the text visible
  3. hide the icons

  Icons aren't strictly necessary on the desktop/tablet versions of the page. */

  #nav .nav-link {
    min-width: var(--button-width);
    font-size: var(--button-font-size);
  }

  #nav .nav-link .bi {
    display: none;
  }
}

/* I think the styling for this can probably be expanded at some point, but for now this is fine. The footer is very
bare as it is. */

#footer {
  text-align: right;
  border-top: 1px solid rgb(var(--shade-500));
  background-color: rgb(var(--shade-200));
}

/* The hero styling is somewhat involved. The exact layout and padding changes depending on the screen size; content
flows horizontally on larger displays, but vertically on smaller ones, for example. */

.hero {
  --hero-padding: 3rem;
  --hero-grid: 50% 50% / 100%;
  box-sizing: border-box;
  display: grid;
  height: 48rem;
  grid: var(--hero-grid);
  padding: var(--hero-padding) var(--breakpoint-padding);
  border-bottom: 1px solid rgb(var(--shade-500));
  background-image: linear-gradient(to bottom, transparent 50%, #EEEEFF);
}

@media (min-width: 600px) {
  .hero {
    --hero-padding: 4rem;
  }
}

@media (min-width: 900px) {
  .hero {
    --hero-padding: 8rem;
    --hero-grid: 100% / 50% 50%;
  }
}

.hero > * {
  display: flex;
  align-items: center;
  justify-content: center;
}

.hero .cat {
  width: 75%;
  height: 75%;
  object-fit: scale-down;
}

.hero .actions {
  display: flex;
  width: 75%;
  flex-direction: column;
  align-items: stretch;
  justify-content: center;
}

@media (min-width: 900px) {
  .hero .actions {
    flex-direction: row;
  }
}

.hero .actions > * {
  flex-grow: 1;
  margin: 0.5rem;
}

.hero .info {
  flex-direction: column;
  text-align: center;
}

.hero .tagline {
  margin: 1rem 0;
}

.hero .heading {
  font-weight: bold;
}

.hero .heading .gradient {
  font-weight: bold;
  background-image: linear-gradient(to right, #4392F1, #1170E4);
  color: transparent;
  background-clip: text;
}

/* Styling for the rest of the landing page. This is fairly sparse. */

.details {
  padding-top: 3rem;
  padding-bottom: 3rem;
  text-align: center;
  vertical-align: middle;
}

@media (min-width: 900px) {
  .details {
    text-align: left;
  }
}

/* Styling for the guild selection screen. This isn't too involved, thanks to the use of grids. */

.guild-display {
  display: grid;
  width: 100%;
  padding: 1rem;
  gap: 1rem;
  grid-template-columns: repeat(auto-fill, minmax(16rem, 1fr));
}

.guild-display .guild {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  border-radius: 1rem;
  border: 1px solid rgb(var(--shade-400));
}

.guild-display .guild .button {
  max-width: 100%;
}

.guild-display .banner {
  position: relative;
  top: 0;
  left: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 6rem;
  border-bottom: 1px solid rgb(var(--shade-400));
  border-top-left-radius: 1rem;
  border-top-right-radius: 1rem;
  background-color: rgb(var(--shade-100));
}

.guild-display .banner > .avatar {
  border: 2px solid rgb(var(--shade-400));
}
